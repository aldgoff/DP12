1. Process Order (domains: size, packager, moldLoc, tags, plastic, color, additives, mold)
   "Process order:"
   "  Setup injection line for <size> order with <packager> packager:"
   "    <IJM> - <metal>(<cavities>) - <belt> belt - <partsBin>."
   "  <Acquire> <mold> mold from <moldLoc>."
   "  Insert tags [<list>] of width <width>/20 mm, blank tag is <20-width> mm."
   "  Load plastic bin with <plastic> and color bin with <color>."
   "    Recipe: <plastic>(vol) <color>(vol) <additive(<vol>) list> = (vol) cc."
   "    Volume: <mold>(vol) * <cavities> cavities = (vol) cc."
   "  Estimated run time (algorithm) = x hour(s)."
   "    Formula:"
   "    Values:"
   "  Cycle <IJM> for <plastic> <run> times."
   "    Close - heat to <temp> - inject at <pressure> PSI - cool to <temp> - separate - <mannor of> eject."
   "    Whenever <partsBin> parts bin was full:"
   "      List of upstream machines to pause..."
   "      ..."
   "  Clean mold of <plastic>: <cleaning steps>."
2. System can handle these types of plastics: (domain: order["plastic"])
   2.1. ABS
   2.2. Polypropylene
   2.3. Polyethelene
   2.4. PET
   2.5. If the plastic is unknown, default to ABS.
		2.5.1. "  <>Unknown plastic |<plastic>| defaulting to ABS."
3. Support these injection cycles: (domain: order["plastic"])
   3.1. ABS: Close - heat to 440 - inject at 125 PSI - cool to 360 - separate - progressive eject.
   3.2. Polypropylene: Close - heat to 350 - inject at 90 PSI - cool to 290 - separate - smooth eject.
   3.3. Polyethelene: Close - heat to 360 - inject at 95 PSI - cool to 280 - separate - smooth eject.
   3.4. PET: Close - heat to 404 - inject at 110 PSI - cool to 340 - separate - smooth eject.

4. Set defaults for missing or unknown parameters.
   4.1. Order size    - "  <>No size specified, defaulting to 100."
   4.2. Packager      ? "  <>Unknown packager |packager| defaulting to bulk."
   4.3. Mold          - "  <>Unknown mold |mold| defaulting to duck."
   4.4. Mold location - "  <>Unknown mold location |location| defaulting to inventory."
   4.5. Color         - "  <>Unknown color |color| defaulting to black.
   4.6. Finish        - "  <>Unknown finish |finish| defaulting to smooth.

5. Clean the molds: (domains: order["plastic"] and metal)
   5.1. Use existing cleaning methods (see namespace legacy_classes)
		5.1.1. ABS - soak in alcohol, rinse with water, dry.
			   use legacy method clean()
		5.1.2. Poly - rinse with acetone, dry.
			   use legacy method prepForReuse()
		5.1.3. PET
			   5.1.3.1. Aluminum - rinse with soap and water, dry.
						use legacy method purify()
			   5.1.3.2. Steel - carbonize (heat to 895 C).
						use legacy method carbonize()
   5.2 cout << "  Clean <metal> mold of <plastic>: <cleaning steps>."

6. Support these injection molding machines: (domain: order["size"])
   6.1.  10,000 - IJM_110 - good for aluminum molds with 1 cavity
   6.2.  20,000 - IJM_120 - good for aluminum molds with 2 cavities
   6.3.  50,000 - IJM_210 - good for steel molds with 1 cavity
   6.3. 100,000 - IJM_220 - good for steel molds with 2 cavities
7. Support these metals for mold blocks: (domain: run size)
   7.1. 10,000 - Aluminum
   7.2. 50,000 - Stainless steel
8. Support mold blocks with multiple cavities: (domains: order["size"], metal)
   8.1. 1
   8.2. 2
9. Support these conveyer belts: (domain: cavities)
   9.1. 1 - Linear
   9.2. 2 - Y-Split
10. Support these output parts bins: (domain: order["size"])
	10.1. 10,000 - CardboardBox
	10.2. 20,000 - ShellBox
	10.3. 50,000 - PallotBox
		  10.3.1. Default to largest if size > max

11. Implement these Packagers: (domain: order["packager"])
	11.1. Bulk (default, just dump parts to the parts bin)
	11.2. ShrinkWrap
	11.3. HardPack
	11.4. If Packager unknown, default to Bulk (none)
		  11.4.1. "  <>Unknown packager |<packager>| defaulting to None."
12. Support all upline machines pausing when parts bin is full:
	12.1. IJM
	12.2. Conveyer belt
	12.3. Packager (unless Bulk Packager)

13. Support these colors (assume volume is 10% of shape, & die independent of plastic type): (domain: color)
	13.0. black
	13.1. brown
	13.2. red
	13.3. orange
	13.4. yellow
	13.5. green
	13.6. If no color specified, default to black.

14. Support these mold shapes (specified volumes & mill steps): (domain: mold)
	14.1. duck (35 cc) - [Mill steps: D3C2D2G4]
		  14.1.1. Default: "  <>Unknown mold |<mold>| defaulting to duck."
	14.2. car (40 cc) - [Mill steps: D2C8D1G3]
	14.3. hero (50 cc) - [Mill steps: D1C1D1G7]
15. Shapes are milled with these techniques (actual steps simulated, see below):
	15.1. drill (Dx)
	15.2. cut (Cx)
	15.3. grind (Gx)
16. Support these finishes: (domain: finish)
	16.1. smooth (default)
		  16.1.1. "  <>Unknown finish |<finish>| defaulting to smooth."
	16.2. rippled
	16.3. dimpled
17. Support these milling platforms: (domains: metal, finish)
	17.1. HighCarbon tools (suitable for aluminum, and steel with smooth finish)
		  17.1.1. "      using HighCarbon tools (drill, cut, and high speed grind) to mill <metal> block into <n> <shape> shape(s) with <finish> finish."
	17.2. Carbide tools (suitable for steel)
		  17.2.1. rippled: "      using Carbide tools (high speed drill, cross cut, and layer grind) to mill <metal> block into <n> <shape> shape(s) with <finish> finish."
	17.3. Diamond tipped (suitable for steel) (default)
		  17.3.1. dimpled: "      using DiamondTipped tools (precision drill, oil cooled cut, and cartoid grind) to mill <metal> block into <n> <shape> shape(s) with <finish> finish."

18. Support these mold locations: inventory, sister company, or mill: (domain: moldLoc)
	18.1. (To keep the final simple, the order will specify the mold location.)
		  18.1.1. Default: "  <>Unknown mold location |location| defaulting to inventory."
	18.2. Pull from Inventory, prior to mill:
		  18.2.1. "    Pull <shape> mold from inventory."
	18.3. Borrow from SisterCompany, prior to mill:
		  18.3.1. "    Borrow <shape> mold from sister company."
	18.4. Create from mill (must be last option):
		  18.3.1. "    Create <shape> mold from mill with <n> cavities - steps: <steps>."
	18.5. Order is important; don't mill if it can be borrowed, don't borrow if one is on hand.




13. Run time estimates (hours): (domain: size)
	13.1. orderSize <= 10,000: BackOfTheEnvelope
		  13.1.1. cycletime = 40.
		  13.1.2. Formula: (orderSize/cavities)*cycleTime/3600.
		  13.1.3. Values: (100)*40/3600.
	13.2. orderSize <= 30,000: Calculation
		  13.2.1. cycleTime = legacy_classes::cycleTime_sec(metal,shape->volume).
		  13.2.2. Formula: (orderSize/cavities)*cycleTime/3600.
		  13.2.3. Values: (10000)*22(Aluminum,40)/3600.
	13.3. orderSize <= 150,000: Historical
		  13.3.1. cycletime = legacy_classes::cycleTime_sec(metal,shape->volume).
		  13.3.1. runTime   = (legacy_classes::setupAvg_min + (orderSize/cavities)*cycletime/60 + legacy_classes::teardownAvg_min)/60;
		  13.3.2. Formula: (setupAvg_min + (orderSize/cavities)*cycleTime_sec(metal, volume_cc)/60 + teardownAvg_min)/60.
		  13.3.3. Values: (118 + (50000)*30(Steel,50)/60 + 54)/60.
	13.4. Default to highest fidelity estimate.
		  13.4.1. "    <>Using most sophisticated estimation algorithm for orders greater than 100000."




16. Support three tags (+ Blank), widths in mm (inserted into molds, typically under the support base, think plastic toy): (domain: tags)
	16.0 Blank (width determined by cavity space & sum of other tags' widths)
	16.1 ModelNumber (2 mm)
	16.2 Country (2 mm)
	16.3 Date (2 mm)
	16.4 Ignore each and every unknown tag
		16.4.1 cout << "    Ignoring unknown tag <tag>.\n"
	16.5 Total space for tags is 20 mm
		16.5.1 cout << "    Insert tags [space separated list of tags] of width <n>/20 mm, blank tag is <20-n> mm.\n";
17. Support three additives, the order specifies the volume in cc: (domains: order[<additive> <vol>])
	17.1 UVInhibiter
	17.2 AntiBacterial
	17.3 Hydrophilic

19. Simulate mixing plastic, color, and additives with volume recipe & total (account for multiple cavities):
	19.1 cout << "    Load plastic bin with <plastic> and color bin with <color>.\n";
	19.2 cout << "      Recipe: <plastic>(<vol>) <color>(<vol>) <additive1>(<vol>)... = <shape vol> cc.\n";
		 19.2.1 Volume of base plastic = shape volume - color volume - sum of additive volumes.
	19.3 cout << "      Volume: <shape>(<shape vol>) * <cavities> cavitie(s) = <total vol> cc.\n";


25. Instrument the destructors:
	25.1 cout << "~<ClassName> ";
	25.2 Or better, use the DTOR macro in macros.h
		 25.2.1 Then if your class hiearachy differs too much you can easily turn dtor instrumentation off
	25.3 Use newlines to logically group the class heirarchies

26. To get the diffs to zero (just a suggestion):
	26.1 #include finalDesign.h
	26.2 In your main(int argc, char* args[]):
		26.2.1 final_design::demo(string(args[1]));	// Pass in the input file (orders_1.txt).
		26.2.2 <program>.exe orders_1.txt > design1.out
		26.2.3 diff design1.out design1Base.out (Should be no difference.)
	26.3 For Part I (2 weeks) you might copy finalDesign.h to finalOriginal.h
		26.3.1 Include it and modify main to call it
		26.3.2 <program>.exe orders_1.txt > original1.out
		26.3.3 diff original1.out original1Base.out (Add code until diffs are zero.)
	26.4 For Part II (in class) you might copy your finalOriginal.h to finalSolution.h
		26.4.1 <program>.exe orders_2.txt > original2.out
		26.4.2 diff original2.out original2Base.out (Diffs should be zero.)
		26.4.3 Include it and modify main to call it
		26.4.2 <program>.exe orders_1.txt > solution1.out
		26.4.3 diff solution1.out solution1Base.out (Diffs should be zero.)
		26.4.2 <program>.exe orders_2.txt > solution2.out
		26.4.4 diff solution2.out solution2Base.out (Add code until diffs are zero.)
	26.5 Email your finalOriginal.h to me at start of class
	26.6 Email your finalSolution.h to me when you are done
		
